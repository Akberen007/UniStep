
//
//  HomeView.swift
//  UniStep
//
//  Created by Akberen on 28.04.2025.
//
import SwiftUI
import FirebaseFirestore

struct HomeView: View {
    @State private var showContent = false
    @State private var showApplicationForm = false
    @State private var showStatusCheck = false
    @State private var showDocuments = false
    @State private var showDeadlines = false
    @State private var showCalculator = false
    @State private var showHelp = false
    @State private var animateCards = false
    @State private var navigateToUniversities = false
    @State private var navigateToLogin = false

    var body: some View {
        NavigationStack {
            GeometryReader { geometry in
                ScrollView {
                    VStack(spacing: 0) {
                        // üîπ Header
                        headerSection
                        
                        // üîπ Hero Section
                        heroSection
                        
                        // üîπ Quick Actions
                        quickActionsSection
                            .opacity(animateCards ? 1 : 0)
                            .offset(x: animateCards ? 0 : -30)
                            .animation(.spring(response: 0.7, dampingFraction: 0.8).delay(0.2), value: animateCards)
                        
                        // üîπ Tools Section
                        toolsSection
                            .opacity(animateCards ? 1 : 0)
                            .offset(x: animateCards ? 0 : 30)
                            .animation(.spring(response: 0.7, dampingFraction: 0.8).delay(0.3), value: animateCards)
                        
                        // üîπ Footer
                        footerSection
                            .opacity(animateCards ? 1 : 0)
                            .animation(.spring(response: 0.7, dampingFraction: 0.8).delay(0.4), value: animateCards)
                    }
                    .padding(.bottom, max(20, geometry.safeAreaInsets.bottom))
                }
                .scrollIndicators(.hidden)
            }
            .background(
                LinearGradient(
                    colors: [Color.uniBackground ?? Color.gray.opacity(0.1), Color.white],
                    startPoint: .top,
                    endPoint: .bottom
                )
                .ignoresSafeArea()
            )
            .onAppear {
                withAnimation(.spring(response: 0.6, dampingFraction: 0.8)) {
                    showContent = true
                }
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                    withAnimation(.spring(response: 0.5, dampingFraction: 0.7)) {
                        animateCards = true
                    }
                }
                TestDataCreator.shared.createTestApplicationsIfNeeded()
            }
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è
            .navigationDestination(isPresented: $navigateToUniversities) {
                UniversitiesCatalogView()
            }
            .navigationDestination(isPresented: $navigateToLogin) {
                RoleSelectionView() // –ü–∞–Ω–µ–ª—å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
            }
            // Sheets
            .sheet(isPresented: $showApplicationForm) {
                ApplicationFormView()
            }
            .sheet(isPresented: $showStatusCheck) {
                StatusCheckView()
            }
            .sheet(isPresented: $showDocuments) {
                DocumentsView()
            }
            .sheet(isPresented: $showDeadlines) {
                DeadlinesView()
            }
            .sheet(isPresented: $showCalculator) {
                CalculatorView()
            }
            .sheet(isPresented: $showHelp) {
                HelpView()
            }
        }
    }
    
    // MARK: - Header Section
    private var headerSection: some View {
        HStack {
            HStack(spacing: 12) {
                ZStack {
                    Circle()
                        .fill(Color.red.opacity(0.1))
                        .frame(width: 48, height: 48)
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ Image("books1") –Ω–µ –Ω–∞–π–¥–µ–Ω
                    Group {
                        if let _ = UIImage(named: "books1") {
                            Image("books1")
                                .resizable()
                                .frame(width: 26, height: 30)
                                .foregroundColor(.red)
                        } else {
                            Image(systemName: "book.closed.fill")
                                .font(.system(size: 20, weight: .semibold))
                                .foregroundColor(.red)
                        }
                    }
                }
                
                VStack(alignment: .leading, spacing: 1) {
                    Text("UniStep")
                        .font(.system(size: 20, weight: .bold))
                        .foregroundColor(.primary)
                    
                    Text("–ü—Ä–∏–µ–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è 2025")
                        .font(.system(size: 11, weight: .medium))
                        .foregroundColor(.secondary)
                }
            }
            
            Spacer()
            
            HStack(spacing: 12) {
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                NotificationButton(hasNotification: true) {
                    print("Notifications tapped")
                }
                
                // –ü—Ä–æ—Ñ–∏–ª—å
                Button(action: {
                    print("University panel tapped")
                    navigateToLogin = true
                }) {
                    ProfileButton()
                }
            }
        }
        .padding(.horizontal, 20)
        .padding(.top, 16)
        .opacity(showContent ? 1 : 0)
        .offset(y: showContent ? 0 : -20)
        .animation(.spring(response: 0.6, dampingFraction: 0.8), value: showContent)
    }
    
    // MARK: - Hero Section
    private var heroSection: some View {
        VStack(spacing: 0) {
            SlideView()
                .frame(height: 180)
                .clipShape(RoundedRectangle(cornerRadius: 16))
                .shadow(color: .black.opacity(0.08), radius: 8, x: 0, y: 4)
                .opacity(showContent ? 1 : 0)
                .scaleEffect(showContent ? 1 : 0.95)
                .animation(.spring(response: 0.7, dampingFraction: 0.8).delay(0.1), value: showContent)
                .padding(.horizontal, 20)
        }
        .padding(.top, 20)
        .padding(.bottom, 24)
    }
    
    // MARK: - Quick Actions Section
        private var quickActionsSection: some View {
            VStack(spacing: 20) {
                // Main Action - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                Button(action: {
                    print("Application form button tapped")
                    showApplicationForm = true
                }) {
                    HStack(spacing: 16) {
                        ZStack {
                            Circle()
                                .fill(Color.white.opacity(0.2))
                                .frame(width: 52, height: 52)
                            
                            Image(systemName: "arrow.up.doc.fill") // –ë–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –∏–∫–æ–Ω–∫–∞
                                .font(.system(size: 22, weight: .semibold))
                                .foregroundColor(.white)
                        }
                        
                        VStack(alignment: .leading, spacing: 3) {
                            Text("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
                                .font(.system(size: 18, weight: .bold))
                                .foregroundColor(.white)
                            
                            Text("–ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.white.opacity(0.9))
                        }
                        
                        Spacer()
                        
                        Image(systemName: "arrow.right")
                            .font(.system(size: 16, weight: .bold))
                            .foregroundColor(.white)
                    }
                    .padding(.horizontal, 20)
                    .padding(.vertical, 18)
                    .background(
                        LinearGradient(
                            colors: [Color.red, Color.red.opacity(0.8)],
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .cornerRadius(16)
                    .shadow(color: .red.opacity(0.3), radius: 12, x: 0, y: 6)
                }
                .buttonStyle(ProfessionalButtonStyle())
                
                // Secondary Actions
                HStack(spacing: 12) {
                    SecondaryActionButton(
                        icon: "doc.text.magnifyingglass",
                        title: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        subtitle: "–ü–æ –∫–æ–¥—É –∑–∞—è–≤–∫–∏",
                        color: .blue,
                        action: {
                            print("Status check button tapped")
                            showStatusCheck = true
                        }
                    )
                    
                    SecondaryActionButton(
                        icon: "building.2.crop.circle.fill",
                        title: "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã",
                        subtitle: "–ö–∞—Ç–∞–ª–æ–≥ –≤—É–∑–æ–≤",
                        color: .purple,
                        action: {
                            print("Universities button tapped")
                            navigateToUniversities = true
                        }
                    )
                }
            }
            .padding(.horizontal, 20)
            .padding(.bottom, 28)
        }

        // MARK: - Tools Section
        private var toolsSection: some View {
            VStack(spacing: 20) {
                HStack {
                    VStack(alignment: .leading, spacing: 2) {
                        Text("–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
                            .font(.system(size: 20, weight: .bold))
                            .foregroundColor(.primary)
                        
                        Text("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
                            .font(.system(size: 14, weight: .medium))
                            .foregroundColor(.secondary)
                    }
                    Spacer()
                }
                .padding(.horizontal, 20)
                
                LazyVGrid(columns: [
                    GridItem(.flexible()),
                    GridItem(.flexible())
                ], spacing: 12) {
                    ToolCard(
                        icon: "folder.fill.badge.questionmark", // –ë–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        title: "–î–æ–∫—É–º–µ–Ω—Ç—ã",
                        description: "–ß–µ–∫-–ª–∏—Å—Ç –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                        color: .orange,
                        action: {
                            print("Documents button tapped")
                            showDocuments = true
                        }
                    )
                    
                    ToolCard(
                        icon: "clock.badge.exclamationmark.fill", // –ë–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –¥–ª—è —Å—Ä–æ–∫–æ–≤
                        title: "–°—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏",
                        description: "–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã",
                        color: .indigo,
                        action: {
                            print("Deadlines button tapped")
                            showDeadlines = true
                        }
                    )
                    
                    ToolCard(
                        icon: "function", // –ë–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
                        title: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                        description: "–®–∞–Ω—Å—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
                        color: .mint,
                        action: {
                            print("Calculator button tapped")
                            showCalculator = true
                        }
                    )
                    
                    ToolCard(
                        icon: "person.fill.questionmark", // –ë–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –¥–ª—è –ø–æ–º–æ—â–∏
                        title: "–ü–æ–º–æ—â—å",
                        description: "FAQ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                        color: .teal,
                        action: {
                            print("Help button tapped")
                            showHelp = true
                        }
                    )
                }
                .padding(.horizontal, 20)
            }
            .padding(.bottom, 32)
        }
    
    // MARK: - Footer Section
    private var footerSection: some View {
        VStack(spacing: 16) {
            Rectangle()
                .fill(Color.gray.opacity(0.15))
                .frame(height: 1)
                .padding(.horizontal, 40)
            
            VStack(spacing: 12) {
                Text("UniStep ‚Äî —Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–∏–µ–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                
                HStack(spacing: 20) {
                    FooterLink(title: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞") {
                        print("Support tapped")
                    }
                    
                    FooterLink(title: "–û –ø—Ä–æ–µ–∫—Ç–µ") {
                        print("About tapped")
                    }
                    
                    FooterLink(title: "–ö–æ–Ω—Ç–∞–∫—Ç—ã") {
                        print("Contacts tapped")
                    }
                }
            }
            .padding(.horizontal, 20)
        }
        .padding(.bottom, 24)
    }
}

// MARK: - Supporting Views

struct NotificationButton: View {
    let hasNotification: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            ZStack {
                Circle()
                    .fill(Color.white)
                    .frame(width: 40, height: 40)
                    .shadow(color: .black.opacity(0.08), radius: 4, x: 0, y: 2)
                
                Image(systemName: "bell")
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(.primary)
                
                if hasNotification {
                    Circle()
                        .fill(Color.red)
                        .frame(width: 8, height: 8)
                        .offset(x: 10, y: -10)
                }
            }
        }
        .buttonStyle(PlainButtonStyle())
    }
}

struct ProfileButton: View {
    var body: some View {
        Circle()
            .fill(Color.white)
            .frame(width: 40, height: 40)
            .shadow(color: .black.opacity(0.08), radius: 4, x: 0, y: 2)
            .overlay(
                Image(systemName: "person.fill")
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(.red)
            )
    }
}

struct SecondaryActionButton: View {
    let icon: String
    let title: String
    let subtitle: String
    let color: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 12) {
                ZStack {
                    Circle()
                        .fill(color.opacity(0.15))
                        .frame(width: 44, height: 44)
                    
                    Image(systemName: icon)
                        .font(.system(size: 18, weight: .semibold))
                        .foregroundColor(color)
                }
                
                VStack(spacing: 3) {
                    Text(title)
                        .font(.system(size: 14, weight: .bold))
                        .foregroundColor(.primary)
                        .multilineTextAlignment(.center)
                    
                    Text(subtitle)
                        .font(.system(size: 11, weight: .medium))
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
            }
            .frame(maxWidth: .infinity)
            .padding(.vertical, 16)
            .background(
                RoundedRectangle(cornerRadius: 16)
                    .fill(Color.white)
                    .shadow(color: .black.opacity(0.06), radius: 8, x: 0, y: 4)
            )
        }
        .buttonStyle(ProfessionalButtonStyle())
    }
}

struct ToolCard: View {
    let icon: String
    let title: String
    let description: String
    let color: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 12) {
                ZStack {
                    RoundedRectangle(cornerRadius: 12)
                        .fill(color.opacity(0.15))
                        .frame(width: 48, height: 48)
                    
                    Image(systemName: icon)
                        .font(.system(size: 20, weight: .semibold))
                        .foregroundColor(color)
                }
                
                VStack(spacing: 4) {
                    Text(title)
                        .font(.system(size: 15, weight: .bold))
                        .foregroundColor(.primary)
                        .multilineTextAlignment(.center)
                    
                    Text(description)
                        .font(.system(size: 12, weight: .medium))
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                        .lineLimit(2)
                }
            }
            .frame(maxWidth: .infinity)
            .padding(.vertical, 20)
            .padding(.horizontal, 12)
            .background(
                RoundedRectangle(cornerRadius: 16)
                    .fill(Color.white)
                    .shadow(color: .black.opacity(0.05), radius: 6, x: 0, y: 3)
            )
        }
        .buttonStyle(ProfessionalButtonStyle())
    }
}

struct FooterLink: View {
    let title: String
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Text(title)
                .font(.system(size: 13, weight: .medium))
                .foregroundColor(.red)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Button Styles

struct ProfessionalButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .scaleEffect(configuration.isPressed ? 0.96 : 1.0)
            .brightness(configuration.isPressed ? -0.05 : 0)
            .animation(.easeInOut(duration: 0.1), value: configuration.isPressed)
    }
}
// MARK: - Status Check View
// –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
struct RealApplicationData {
    let id: String
    let fullName: String
    let university: String
    let faculty: String
    let specialty: String
    let status: String
    let submissionDate: Date
    let phone: String
    let email: String
}

// MARK: - Status Check View (–ó–ê–ú–ï–ù–ò–¢–¨ –≤ HomeView.swift - –ß–ê–°–¢–¨ 1)
struct StatusCheckView: View {
    @Environment(\.dismiss) private var dismiss
    @State private var searchText = ""
    @State private var selectedOption = 0
    @State private var foundApplication: String? = nil
    @State private var foundApplicationData: RealApplicationData? = nil
    @State private var isSearching = false
    @State private var animateContent = false
    
    var body: some View {
        NavigationView {
            GeometryReader { geometry in
                ScrollView {
                    VStack(spacing: 0) {
                        // Header Section
                        VStack(spacing: 20) {
                            Spacer().frame(height: max(40, geometry.safeAreaInsets.top + 10))
                            
                            // Icon with animation
                            ZStack {
                                Circle()
                                    .fill(Color.blue.opacity(0.15))
                                    .frame(width: 100, height: 100)
                                    .scaleEffect(animateContent ? 1 : 0.8)
                                    .animation(.spring(response: 0.6, dampingFraction: 0.8), value: animateContent)
                                
                                Image(systemName: "magnifyingglass.circle.fill")
                                    .font(.system(size: 50))
                                    .foregroundColor(.blue)
                                    .opacity(animateContent ? 1 : 0)
                                    .animation(.easeOut(duration: 0.8).delay(0.2), value: animateContent)
                            }
                            
                            VStack(spacing: 12) {
                                Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
                                    .font(.system(size: 28, weight: .bold))
                                    .foregroundColor(.primary)
                                    .opacity(animateContent ? 1 : 0)
                                    .offset(y: animateContent ? 0 : 20)
                                    .animation(.easeOut(duration: 0.8).delay(0.3), value: animateContent)
                                
                                Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
                                    .font(.system(size: 16))
                                    .foregroundColor(.secondary)
                                    .multilineTextAlignment(.center)
                                    .opacity(animateContent ? 1 : 0)
                                    .offset(y: animateContent ? 0 : 20)
                                    .animation(.easeOut(duration: 0.8).delay(0.4), value: animateContent)
                            }
                        }
                        .padding(.horizontal, 20)
                        .padding(.bottom, 40)
                        
                        // Search Section
                        VStack(spacing: 24) {
                            // Search Type Picker
                            VStack(spacing: 16) {
                                Picker("–¢–∏–ø –ø–æ–∏—Å–∫–∞", selection: $selectedOption) {
                                    Text("–ü–æ –∫–æ–¥—É –∑–∞—è–≤–∫–∏").tag(0)
                                    Text("–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞").tag(1)
                                }
                                .pickerStyle(SegmentedPickerStyle())
                                .opacity(animateContent ? 1 : 0)
                                .offset(x: animateContent ? 0 : -30)
                                .animation(.easeOut(duration: 0.6).delay(0.5), value: animateContent)
                                .onChange(of: selectedOption) { _ in
                                    searchText = ""
                                    foundApplication = nil
                                    foundApplicationData = nil
                                }
                                
                                // Search Field
                                VStack(alignment: .leading, spacing: 8) {
                                    HStack(spacing: 16) {
                                        Image(systemName: selectedOption == 0 ? "number.circle.fill" : "phone.circle.fill")
                                            .foregroundColor(.blue)
                                            .frame(width: 24)
                                        
                                        TextField(
                                            selectedOption == 0 ? "AB2025-1234" : "+7 777 123 45 67",
                                            text: $searchText
                                        )
                                        .keyboardType(selectedOption == 0 ? .default : .default)
                                        .autocapitalization(selectedOption == 0 ? .allCharacters : .none)
                                        .font(.system(size: 16))
                                        .foregroundColor(.primary)
                                        .accentColor(.blue)
                                        .onSubmit {
                                            searchApplications()
                                        }
                                        .onChange(of: searchText) { newValue in
                                            if selectedOption == 1 {
                                                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
                                                let formatted = formatPhoneInput(newValue)
                                                if formatted != newValue {
                                                    searchText = formatted
                                                }
                                            }
                                        }
                                        
                                        if isSearching {
                                            ProgressView()
                                                .scaleEffect(0.8)
                                        }
                                    }
                                    .padding()
                                    .background(
                                        RoundedRectangle(cornerRadius: 16)
                                            .fill(Color(.systemGray6))
                                            .overlay(
                                                RoundedRectangle(cornerRadius: 16)
                                                    .stroke(Color.blue.opacity(0.3), lineWidth: 1)
                                            )
                                    )
                                    
                                    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
                                    if selectedOption == 0 {
                                        Text("–§–æ—Ä–º–∞—Ç: AB2025-1234")
                                            .font(.caption)
                                            .foregroundColor(.secondary)
                                            .padding(.leading, 4)
                                    } else {
                                        Text("–§–æ—Ä–º–∞—Ç: +7 777 123 45 67 –∏–ª–∏ 87771234567")
                                            .font(.caption)
                                            .foregroundColor(.secondary)
                                            .padding(.leading, 4)
                                    }
                                }
                                .opacity(animateContent ? 1 : 0)
                                .offset(x: animateContent ? 0 : 30)
                                .animation(.easeOut(duration: 0.6).delay(0.6), value: animateContent)
                            }
                            
                            // Search Button
                            Button(action: searchApplications) {
                                HStack(spacing: 12) {
                                    if !isSearching {
                                        Image(systemName: "magnifyingglass")
                                            .font(.system(size: 16, weight: .semibold))
                                    }
                                    
                                    Text(isSearching ? "–ü–æ–∏—Å–∫..." : "–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É")
                                        .font(.system(size: 18, weight: .semibold))
                                }
                                .frame(maxWidth: .infinity)
                                .frame(height: 56)
                                .background(
                                    RoundedRectangle(cornerRadius: 16)
                                        .fill(
                                            LinearGradient(
                                                colors: searchText.isEmpty || isSearching ?
                                                [Color.gray.opacity(0.6)] :
                                                    [Color.blue, Color.blue.opacity(0.8)],
                                                startPoint: .leading,
                                                endPoint: .trailing
                                            )
                                        )
                                )
                                .foregroundColor(.white)
                                .shadow(
                                    color: searchText.isEmpty || isSearching ? Color.clear : Color.blue.opacity(0.3),
                                    radius: 8, x: 0, y: 4
                                )
                            }
                            .disabled(searchText.isEmpty || isSearching)
                            .opacity(animateContent ? 1 : 0)
                            .animation(.spring(response: 0.6, dampingFraction: 0.8).delay(0.7), value: animateContent)
                        }
                        .padding(.horizontal, 20)
                        .padding(.bottom, 32)
                        
                        // Results Section
                        if let result = foundApplication {
                            if let appData = foundApplicationData {
                                // –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
                                VStack(spacing: 20) {
                                    // Success icon
                                    ZStack {
                                        Circle()
                                            .fill(Color.green.opacity(0.15))
                                            .frame(width: 80, height: 80)
                                        
                                        Image(systemName: "checkmark.circle.fill")
                                            .font(.system(size: 32))
                                            .foregroundColor(.green)
                                    }
                                    
                                    VStack(spacing: 12) {
                                        Text("–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞")
                                            .font(.system(size: 20, weight: .bold))
                                            .foregroundColor(.primary)
                                        
                                        Text("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
                                            .font(.system(size: 16))
                                            .foregroundColor(.secondary)
                                            .multilineTextAlignment(.center)
                                    }
                                    
                                    // Application card
                                    VStack(spacing: 16) {
                                        HStack {
                                            VStack(alignment: .leading, spacing: 4) {
                                                Text(appData.university)
                                                    .font(.system(size: 18, weight: .bold))
                                                    .foregroundColor(.primary)
                                                
                                                Text(appData.specialty)
                                                    .font(.system(size: 14, weight: .medium))
                                                    .foregroundColor(.secondary)
                                            }
                                            
                                            Spacer()
                                            
                                            StatusBadge(status: ApplicationStatus(rawValue: appData.status) ?? .pending)
                                        }
                                        
                                        VStack(spacing: 8) {
                                            HStack {
                                                SimpleDetailRow(title: "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", value: appData.fullName)
                                                Spacer()
                                                SimpleDetailRow(title: "–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏", value: formatDate(appData.submissionDate))
                                            }
                                            
                                            HStack {
                                                SimpleDetailRow(title: "–§–∞–∫—É–ª—å—Ç–µ—Ç", value: appData.faculty)
                                                Spacer()
                                                SimpleDetailRow(title: "–¢–µ–ª–µ—Ñ–æ–Ω", value: appData.phone)
                                            }
                                            
                                            HStack {
                                                SimpleDetailRow(title: "Email", value: appData.email)
                                                Spacer()
                                            }
                                        }
                                    }
                                    .padding(20)
                                    .background(Color.white)
                                    .cornerRadius(16)
                                    .shadow(color: .black.opacity(0.08), radius: 8, x: 0, y: 4)
                                }
                                .padding(.horizontal, 20)
                                .transition(.move(edge: .bottom).combined(with: .opacity))
                            } else {
                                // –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                                VStack(spacing: 20) {
                                    ZStack {
                                        Circle()
                                            .fill(Color.red.opacity(0.15))
                                            .frame(width: 80, height: 80)
                                        
                                        Image(systemName: "xmark.circle.fill")
                                            .font(.system(size: 32))
                                            .foregroundColor(.red)
                                    }
                                    
                                    VStack(spacing: 12) {
                                        Text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                            .font(.system(size: 20, weight: .bold))
                                            .foregroundColor(.primary)
                                        
                                        Text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                                            .font(.system(size: 16))
                                            .foregroundColor(.secondary)
                                            .multilineTextAlignment(.center)
                                    }
                                }
                                .padding(.horizontal, 20)
                                .transition(.move(edge: .bottom).combined(with: .opacity))
                            }
                        }
                        
                        Spacer().frame(height: max(40, geometry.safeAreaInsets.bottom + 20))
                    }
                }
            }
            .background(
                LinearGradient(
                    colors: [Color(.systemBackground), Color(.systemGray6)],
                    startPoint: .top,
                    endPoint: .bottom
                )
                .ignoresSafeArea()
            )
            .onAppear {
                withAnimation {
                    animateContent = true
                }
            }
            .navigationTitle("–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–ó–∞–∫—Ä—ã—Ç—å") {
                        dismiss()
                    }
                }
            }
        }
    }
    
    // MARK: - –ß–ê–°–¢–¨ 2: –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ (–¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ body: some View)
    
    // MARK: - Phone Formatting Function
    private func formatPhoneInput(_ input: String) -> String {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
        let digits = input.filter { $0.isNumber || $0 == "+" }
        
        // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
        if digits.hasPrefix("8") {
            let withoutFirst = String(digits.dropFirst())
            return "+7" + withoutFirst
        }
        
        // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 (–±–µ–∑ +), –¥–æ–±–∞–≤–ª—è–µ–º +
        if digits.hasPrefix("7") && !digits.hasPrefix("+7") {
            return "+" + digits
        }
        
        return digits
    }
    
    
    // MARK: - Enhanced Search Function
    private func searchApplications() {
        guard !searchText.trimmingCharacters(in: .whitespaces).isEmpty else {
            return
        }
        
        isSearching = true
        foundApplication = nil
        foundApplicationData = nil
        
        let db = Firestore.firestore()
        
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏...")
        print("üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '\(searchText)'")
        print("üîç –¢–∏–ø –ø–æ–∏—Å–∫–∞: \(selectedOption == 0 ? "–ü–æ –∫–æ–¥—É" : "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")")
        
        if selectedOption == 0 {
            // –ü–æ–∏—Å–∫ –ø–æ ID –∑–∞—è–≤–∫–∏ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            searchByApplicationId()
        } else {
            // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            searchByPhoneNumber()
        }
    }
    
    private func searchByApplicationId() {
        let db = Firestore.firestore()
        let searchId = searchText.trimmingCharacters(in: .whitespaces)
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        db.collection("applications").document(searchId).getDocument { snapshot, error in
            if let document = snapshot, document.exists {
                self.processFoundDocument(document)
                return
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–æ–ª–µ id –≤–Ω—É—Ç—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            db.collection("applications")
                .whereField("id", isEqualTo: searchId)
                .getDocuments { snapshot, error in
                    self.handleSearchResults(snapshot: snapshot, error: error, searchTerm: searchId)
                }
        }
    }
    
    private func searchByPhoneNumber() {
        let db = Firestore.firestore()
        let searchPhone = searchText.trimmingCharacters(in: .whitespaces)
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        let phoneFormats = generatePhoneFormats(from: searchPhone)
        
        print("üîç –ò—â–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: \(phoneFormats)")
        
        // –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º
        db.collection("applications")
            .whereField("phone", in: phoneFormats)
            .getDocuments { snapshot, error in
                self.handleSearchResults(snapshot: snapshot, error: error, searchTerm: searchPhone)
            }
    }
    
    private func generatePhoneFormats(from input: String) -> [String] {
        let cleanDigits = input.filter { $0.isNumber }
        var formats: [String] = [input] // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥
        
        if cleanDigits.count >= 10 {
            let last10 = String(cleanDigits.suffix(10))
            let last11 = cleanDigits.count >= 11 ? String(cleanDigits.suffix(11)) : ""
            
            // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats.append("+7" + last10)
            formats.append("8" + last10)
            formats.append("+7 " + formatWithSpaces(last10))
            formats.append("8 " + formatWithSpaces(last10))
            formats.append("+7 (" + String(last10.prefix(3)) + ") " + formatMiddlePart(last10))
            formats.append("8 (" + String(last10.prefix(3)) + ") " + formatMiddlePart(last10))
            
            if !last11.isEmpty {
                formats.append(last11)
                formats.append("+" + last11)
            }
        }
        
        return Array(Set(formats)) // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    }
    
    private func formatWithSpaces(_ digits: String) -> String {
        guard digits.count == 10 else { return digits }
        let formatted = String(digits.prefix(3)) + " " +
        String(digits.dropFirst(3).prefix(3)) + " " +
        String(digits.dropFirst(6).prefix(2)) + " " +
        String(digits.suffix(2))
        return formatted
    }
    
    private func formatMiddlePart(_ digits: String) -> String {
        guard digits.count == 10 else { return digits }
        return String(digits.dropFirst(3).prefix(3)) + "-" +
        String(digits.dropFirst(6).prefix(2)) + "-" +
        String(digits.suffix(2))
    }
    
    private func handleSearchResults(snapshot: QuerySnapshot?, error: Error?, searchTerm: String) {
        DispatchQueue.main.async {
            self.isSearching = false
            
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error)")
                self.foundApplication = "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞"
                self.foundApplicationData = nil
                return
            }
            
            guard let documents = snapshot?.documents, !documents.isEmpty else {
                print("üìù –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è: \(searchTerm)")
                self.foundApplication = "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                self.foundApplicationData = nil
                return
            }
            
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
            self.processFoundDocument(documents[0])
        }
    }
    
    private func processFoundDocument(_ document: DocumentSnapshot) {
        let data = document.data() ?? [:]
        
        DispatchQueue.main.async {
            self.isSearching = false
            
            self.foundApplicationData = RealApplicationData(
                id: document.documentID,
                fullName: data["fullName"] as? String ?? "",
                university: data["university"] as? String ?? "",
                faculty: data["faculty"] as? String ?? "",
                specialty: data["specialty"] as? String ?? "",
                status: data["status"] as? String ?? "pending",
                submissionDate: (data["submissionDate"] as? Timestamp)?.dateValue() ?? Date(),
                phone: data["phone"] as? String ?? "",
                email: data["email"] as? String ?? ""
            )
            
            self.foundApplication = "–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞"
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è: \(self.foundApplicationData?.fullName ?? "")")
        }
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy"
        return formatter.string(from: date)
    }
    
    // MARK: - Simple Detail Row (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    struct SimpleDetailRow: View {
        let title: String
        let value: String
        
        var body: some View {
            VStack(alignment: .leading, spacing: 2) {
                Text(title)
                    .font(.system(size: 11, weight: .medium))
                    .foregroundColor(.secondary)
                
                Text(value)
                    .font(.system(size: 13, weight: .semibold))
                    .foregroundColor(.primary)
                    .lineLimit(2)
            }
        }
    }
    
    // MARK: - Supporting Views
    
    struct ApplicationResultCard: View {
        let application: Application
        
        var body: some View {
            VStack(spacing: 16) {
                // Header
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text(application.universityShortName)
                            .font(.system(size: 18, weight: .bold))
                            .foregroundColor(.primary)
                        
                        Text(application.faculty)
                            .font(.system(size: 14, weight: .medium))
                            .foregroundColor(.secondary)
                            .lineLimit(1)
                    }
                    
                    Spacer()
                    
                    StatusBadge(status: application.status)
                }
                
                // Details
                VStack(spacing: 8) {
                    HStack {
                        DetailRow(
                            title: "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç",
                            value: application.fullName,
                            icon: "person.fill"
                        )
                        
                        Spacer()
                        
                        DetailRow(
                            title: "–ü–æ–¥–∞–Ω–∞",
                            value: formatDate(application.submissionDate),
                            icon: "calendar"
                        )
                    }
                    
                    if !application.specialization.isEmpty {
                        HStack {
                            DetailRow(
                                title: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
                                value: application.specialization,
                                icon: "book.fill"
                            )
                            
                            Spacer()
                        }
                    }
                }
                
                // Action
                HStack {
                    Spacer()
                    
                    HStack(spacing: 4) {
                        Text("–ü–æ–¥—Ä–æ–±–Ω–µ–µ")
                            .font(.system(size: 14, weight: .semibold))
                            .foregroundColor(.blue)
                        
                        Image(systemName: "arrow.right")
                            .font(.system(size: 12, weight: .semibold))
                            .foregroundColor(.blue)
                    }
                }
            }
            .padding(20)
            .background(Color.white)
            .cornerRadius(16)
            .shadow(color: .black.opacity(0.08), radius: 8, x: 0, y: 4)
        }
        
        private func formatDate(_ date: Date) -> String {
            let formatter = DateFormatter()
            formatter.dateFormat = "dd.MM.yyyy"
            return formatter.string(from: date)
        }
    }
    
    struct SuggestionRow: View {
        let text: String
        
        var body: some View {
            HStack(spacing: 8) {
                Circle()
                    .fill(Color.orange)
                    .frame(width: 4, height: 4)
                
                Text(text)
                    .font(.system(size: 13))
                    .foregroundColor(.secondary)
                
                Spacer()
            }
        }
    }
    struct InfoSection<Content: View>: View {
        let title: String
        let content: Content
        
        init(title: String, @ViewBuilder content: () -> Content) {
            self.title = title
            self.content = content()
        }
        
        var body: some View {
            VStack(alignment: .leading, spacing: 12) {
                Text(title)
                    .font(.system(size: 18, weight: .bold))
                    .foregroundColor(.primary)
                
                VStack(spacing: 12) {
                    content
                }
            }
            .padding(20)
            .background(Color.white)
            .cornerRadius(16)
            .shadow(color: .black.opacity(0.05), radius: 8, x: 0, y: 4)
        }
    }
}

// MARK: - Placeholder Views –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è views –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
struct DocumentsView: View {
    @Environment(\.dismiss) private var dismiss
    @State private var checkedDocuments: Set<Int> = []
    
    let requiredDocuments = [
        DocumentItem(
            id: 0,
            title: "–î–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å",
            description: "–ü–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏",
            isRequired: true,
            note: "–û—Ä–∏–≥–∏–Ω–∞–ª + –∫–æ–ø–∏—è"
        ),
        DocumentItem(
            id: 1,
            title: "–î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏",
            description: "–ê—Ç—Ç–µ—Å—Ç–∞—Ç –æ —Å—Ä–µ–¥–Ω–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏",
            isRequired: true,
            note: "–û—Ä–∏–≥–∏–Ω–∞–ª + –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è"
        ),
        DocumentItem(
            id: 2,
            title: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ù–¢/–ö–¢–ê",
            description: "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            isRequired: true,
            note: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É"
        ),
        DocumentItem(
            id: 3,
            title: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            description: "6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–∑–º–µ—Ä–æ–º 3x4 —Å–º",
            isRequired: true,
            note: "–¶–≤–µ—Ç–Ω—ã–µ, –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ"
        ),
        DocumentItem(
            id: 4,
            title: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞",
            description: "–°–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã 086-–£",
            isRequired: true,
            note: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"
        ),
        DocumentItem(
            id: 5,
            title: "–í–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç",
            description: "–î–ª—è –ª–∏—Ü –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞",
            isRequired: false,
            note: "–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏"
        )
    ]
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    // Header
                    VStack(spacing: 16) {
                        Image(systemName: "folder.fill.badge.questionmark")
                            .font(.system(size: 60))
                            .foregroundColor(.orange)
                        
                        VStack(spacing: 8) {
                            Text("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
                                .font(.title)
                                .fontWeight(.bold)
                            
                            Text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
                                .font(.body)
                                .foregroundColor(.secondary)
                                .multilineTextAlignment(.center)
                        }
                    }
                    .padding(.top, 20)
                    
                    // Progress
                    VStack(spacing: 12) {
                        HStack {
                            Text("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
                                .font(.headline)
                                .fontWeight(.semibold)
                            
                            Spacer()
                            
                            Text("\(checkedDocuments.count)/\(requiredDocuments.filter(\.isRequired).count)")
                                .font(.subheadline)
                                .fontWeight(.medium)
                                .foregroundColor(.orange)
                        }
                        
                        ProgressView(value: Double(checkedDocuments.count), total: Double(requiredDocuments.filter(\.isRequired).count))
                            .tint(.orange)
                    }
                    .padding()
                    .background(Color.orange.opacity(0.1))
                    .cornerRadius(12)
                    
                    // Documents List
                    VStack(spacing: 16) {
                        ForEach(requiredDocuments, id: \.id) { document in
                            DocumentCheckCard(
                                document: document,
                                isChecked: checkedDocuments.contains(document.id)
                            ) {
                                toggleDocument(document.id)
                            }
                        }
                    }
                    
                    // Tips Section
                    VStack(alignment: .leading, spacing: 12) {
                        Text("üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã")
                            .font(.headline)
                            .fontWeight(.bold)
                        
                        VStack(spacing: 8) {
                            TipRow(text: "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ - –∑–∞ 2-3 –Ω–µ–¥–µ–ª–∏ –¥–æ –ø–æ–¥–∞—á–∏")
                            TipRow(text: "–°–¥–µ–ª–∞–π—Ç–µ –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                            TipRow(text: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–ø—Ä–∞–≤–æ–∫")
                            TipRow(text: "–£—Ç–æ—á–Ω–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")
                        }
                    }
                    .padding()
                    .background(Color.blue.opacity(0.1))
                    .cornerRadius(12)
                }
                .padding()
            }
            .navigationTitle("–î–æ–∫—É–º–µ–Ω—Ç—ã")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–ó–∞–∫—Ä—ã—Ç—å") { dismiss() }
                }
            }
        }
    }
    
    private func toggleDocument(_ id: Int) {
        if checkedDocuments.contains(id) {
            checkedDocuments.remove(id)
        } else {
            checkedDocuments.insert(id)
        }
    }
}

struct DocumentItem {
    let id: Int
    let title: String
    let description: String
    let isRequired: Bool
    let note: String
}

struct DocumentCheckCard: View {
    let document: DocumentItem
    let isChecked: Bool
    let onToggle: () -> Void
    
    var body: some View {
        Button(action: onToggle) {
            HStack(spacing: 16) {
                // Checkbox
                ZStack {
                    Circle()
                        .fill(isChecked ? Color.orange : Color.clear)
                        .frame(width: 24, height: 24)
                        .overlay(
                            Circle()
                                .stroke(isChecked ? Color.orange : Color.gray, lineWidth: 2)
                        )
                    
                    if isChecked {
                        Image(systemName: "checkmark")
                            .font(.system(size: 12, weight: .bold))
                            .foregroundColor(.white)
                    }
                }
                
                // Content
                VStack(alignment: .leading, spacing: 4) {
                    HStack {
                        Text(document.title)
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.primary)
                        
                        if document.isRequired {
                            Text("*")
                                .foregroundColor(.red)
                                .font(.headline)
                        }
                        
                        Spacer()
                    }
                    
                    Text(document.description)
                        .font(.system(size: 14))
                        .foregroundColor(.secondary)
                    
                    Text(document.note)
                        .font(.system(size: 12))
                        .foregroundColor(.orange)
                }
                
                Spacer()
            }
        }
        .buttonStyle(PlainButtonStyle())
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
    }
}

struct TipRow: View {
    let text: String
    
    var body: some View {
        HStack(alignment: .top, spacing: 8) {
            Circle()
                .fill(Color.blue)
                .frame(width: 6, height: 6)
                .padding(.top, 6)
            
            Text(text)
                .font(.system(size: 14))
                .foregroundColor(.primary)
            
            Spacer()
        }
    }
}

struct DeadlinesView: View {
    @Environment(\.dismiss) private var dismiss
    @State private var selectedTab = 0
    
    let keyDates = [
        DeadlineItem(
            date: Date.from("2025-06-20"),
            title: "–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            description: "–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–µ–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏",
            type: .start,
            isImportant: true
        ),
        DeadlineItem(
            date: Date.from("2025-07-25"),
            title: "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            description: "–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–∞—á–∏ –Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≥—Ä–∞–Ω—Ç",
            type: .deadline,
            isImportant: true
        ),
        DeadlineItem(
            date: Date.from("2025-08-05"),
            title: "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ",
            description: "–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            type: .deadline,
            isImportant: false
        ),
        DeadlineItem(
            date: Date.from("2025-08-10"),
            title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            description: "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö",
            type: .result,
            isImportant: true
        ),
        DeadlineItem(
            date: Date.from("2025-08-15"),
            title: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
            description: "–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            type: .confirmation,
            isImportant: true
        )
    ]
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Header
                VStack(spacing: 16) {
                    Image(systemName: "clock.badge.exclamationmark.fill")
                        .font(.system(size: 60))
                        .foregroundColor(.indigo)
                    
                    VStack(spacing: 8) {
                        Text("–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã")
                            .font(.title)
                            .fontWeight(.bold)
                        
                        Text("–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Å—Ä–æ–∫–∏ –ø—Ä–∏–µ–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ 2025")
                            .font(.body)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                    }
                }
                .padding(.top, 20)
                .padding(.horizontal)
                
                // Current Status
                currentStatusCard
                    .padding()
                
                // Tabs
                Picker("", selection: $selectedTab) {
                    Text("–ö–∞–ª–µ–Ω–¥–∞—Ä—å").tag(0)
                    Text("–≠—Ç–∞–ø—ã").tag(1)
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding(.horizontal)
                
                // Content
                if selectedTab == 0 {
                    calendarView
                } else {
                    stagesView
                }
                
                Spacer()
            }
            .navigationTitle("–°—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–ó–∞–∫—Ä—ã—Ç—å") { dismiss() }
                }
            }
        }
    }
    
    private var currentStatusCard: some View {
        let nextDeadline = keyDates.first { $0.date > Date() }
        
        return VStack(spacing: 12) {
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
                        .font(.headline)
                        .fontWeight(.bold)
                    
                    if let next = nextDeadline {
                        Text("–î–æ \(next.title.lowercased())")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    } else {
                        Text("–ü—Ä–∏–µ–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                }
                Spacer()
                
                if let next = nextDeadline {
                    VStack(alignment: .trailing) {
                        Text("\(daysUntil(next.date)) –¥–Ω–µ–π")
                            .font(.title2)
                            .fontWeight(.bold)
                            .foregroundColor(.indigo)
                        
                        Text("–æ—Å—Ç–∞–ª–æ—Å—å")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
            }
        }
        .padding()
        .background(Color.indigo.opacity(0.1))
        .cornerRadius(12)
    }
    
    private var calendarView: some View {
        ScrollView {
            LazyVStack(spacing: 16) {
                ForEach(keyDates.sorted { $0.date < $1.date }, id: \.title) { deadline in
                    DeadlineCard(deadline: deadline)
                }
            }
            .padding()
        }
    }
    
    private var stagesView: some View {
        ScrollView {
            VStack(spacing: 0) {
                ForEach(Array(keyDates.sorted { $0.date < $1.date }.enumerated()), id: \.element.title) { index, deadline in
                    StageRow(
                        deadline: deadline,
                        isLast: index == keyDates.count - 1,
                        isCompleted: deadline.date < Date()
                    )
                }
            }
            .padding()
        }
    }
    
    private func daysUntil(_ date: Date) -> Int {
        max(0, Calendar.current.dateComponents([.day], from: Date(), to: date).day ?? 0)
    }
}

struct DeadlineItem {
    let date: Date
    let title: String
    let description: String
    let type: DeadlineType
    let isImportant: Bool
}

enum DeadlineType {
    case start, deadline, result, confirmation
    
    var color: Color {
        switch self {
        case .start: return .green
        case .deadline: return .red
        case .result: return .blue
        case .confirmation: return .orange
        }
    }
    
    var icon: String {
        switch self {
        case .start: return "play.circle.fill"
        case .deadline: return "exclamationmark.triangle.fill"
        case .result: return "list.bullet.clipboard.fill"
        case .confirmation: return "checkmark.circle.fill"
        }
    }
}

struct DeadlineCard: View {
    let deadline: DeadlineItem
    
    var body: some View {
        HStack(spacing: 16) {
            VStack {
                Text(DateFormatter.day.string(from: deadline.date))
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(deadline.type.color)
                
                Text(DateFormatter.monthShort.string(from: deadline.date).uppercased())
                    .font(.caption)
                    .fontWeight(.medium)
                    .foregroundColor(.secondary)
            }
            .frame(width: 50)
            
            VStack(alignment: .leading, spacing: 4) {
                HStack {
                    Text(deadline.title)
                        .font(.system(size: 16, weight: .semibold))
                        .foregroundColor(.primary)
                    
                    if deadline.isImportant {
                        Image(systemName: "star.fill")
                            .font(.system(size: 12))
                            .foregroundColor(.orange)
                    }
                    
                    Spacer()
                }
                
                Text(deadline.description)
                    .font(.system(size: 14))
                    .foregroundColor(.secondary)
                
                Text("–û—Å—Ç–∞–ª–æ—Å—å: \(daysUntil(deadline.date)) –¥–Ω–µ–π")
                    .font(.system(size: 12))
                    .foregroundColor(deadline.type.color)
            }
            
            Image(systemName: deadline.type.icon)
                .font(.system(size: 20))
                .foregroundColor(deadline.type.color)
        }
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
    }
    
    private func daysUntil(_ date: Date) -> Int {
        max(0, Calendar.current.dateComponents([.day], from: Date(), to: date).day ?? 0)
    }
}

struct StageRow: View {
    let deadline: DeadlineItem
    let isLast: Bool
    let isCompleted: Bool
    
    var body: some View {
        HStack(alignment: .top, spacing: 16) {
            VStack(spacing: 0) {
                Circle()
                    .fill(isCompleted ? deadline.type.color : Color.gray.opacity(0.3))
                    .frame(width: 20, height: 20)
                    .overlay(
                        Image(systemName: isCompleted ? "checkmark" : deadline.type.icon)
                            .font(.system(size: 10, weight: .bold))
                            .foregroundColor(.white)
                    )
                
                if !isLast {
                    Rectangle()
                        .fill(Color.gray.opacity(0.3))
                        .frame(width: 2, height: 40)
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(deadline.title)
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(.primary)
                
                Text(deadline.description)
                    .font(.system(size: 14))
                    .foregroundColor(.secondary)
                
                Text(DateFormatter.full.string(from: deadline.date))
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(deadline.type.color)
            }
            
            Spacer()
        }
        .padding(.bottom, isLast ? 0 : 16)
    }
}

extension DateFormatter {
    static let day: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd"
        return formatter
    }()
    
    static let monthShort: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "MMM"
        formatter.locale = Locale(identifier: "ru_RU")
        return formatter
    }()
    
    static let full: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.locale = Locale(identifier: "ru_RU")
        return formatter
    }()
}

extension Date {
    static func from(_ string: String) -> Date {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        return formatter.date(from: string) ?? Date()
    }
}


// MARK: - University Picker

struct UniversityPickerView: View {
    @Environment(\.dismiss) private var dismiss
    let universities: [String]
    @Binding var selectedUniversity: String
    
    var body: some View {
        NavigationView {
            List(universities, id: \.self) { university in
                Button(action: {
                    selectedUniversity = university
                    dismiss()
                }) {
                    HStack {
                        Text(university)
                            .font(.system(size: 16))
                            .foregroundColor(.primary)
                        
                        Spacer()
                        
                        if selectedUniversity == university {
                            Image(systemName: "checkmark")
                                .foregroundColor(.mint)
                                .font(.system(size: 16, weight: .semibold))
                        }
                    }
                    .padding(.vertical, 4)
                }
                .buttonStyle(PlainButtonStyle())
            }
            .navigationTitle("–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–û—Ç–º–µ–Ω–∞") { dismiss() }
                }
            }
        }
    }
}

// MARK: - Specialty Picker

struct SpecialtyPickerView: View {
    @Environment(\.dismiss) private var dismiss
    let specialties: [String]
    @Binding var selectedSpecialty: String
    
    var body: some View {
        NavigationView {
            List(specialties, id: \.self) { specialty in
                Button(action: {
                    selectedSpecialty = specialty
                    dismiss()
                }) {
                    HStack {
                        Text(specialty)
                            .font(.system(size: 16))
                            .foregroundColor(.primary)
                        
                        Spacer()
                        
                        if selectedSpecialty == specialty {
                            Image(systemName: "checkmark")
                                .foregroundColor(.mint)
                                .font(.system(size: 16, weight: .semibold))
                        }
                    }
                    .padding(.vertical, 4)
                }
                .buttonStyle(PlainButtonStyle())
            }
            .navigationTitle("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–û—Ç–º–µ–Ω–∞") { dismiss() }
                }
            }
        }
    }
}

struct CalculationResult {
    let percentage: Int
    let level: String
    let recommendation: String
    let entScore: Int
    let certScore: Double
    let university: String
    let specialty: String
}

struct ScoreInputCard: View {
    let title: String
    let placeholder: String
    @Binding var value: String
    let maxValue: Double
    let description: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(title)
                .font(.system(size: 16, weight: .semibold))
                .foregroundColor(.primary)
            
            TextField(placeholder, text: $value)
                .keyboardType(.decimalPad)
                .font(.system(size: 16))
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
            
            HStack {
                Text(description)
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Spacer()
                
                if let numValue = Double(value), numValue > 0 {
                    Text("\(Int((numValue / maxValue) * 100))%")
                        .font(.caption)
                        .fontWeight(.medium)
                        .foregroundColor(.mint)
                }
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
    }
}

struct SelectionCard: View {
    let title: String
    let value: String
    let placeholder: String
    let action: () -> Void
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(title)
                .font(.system(size: 16, weight: .semibold))
                .foregroundColor(.primary)
            
            Button(action: action) {
                HStack {
                    Text(value.isEmpty ? placeholder : value)
                        .font(.system(size: 16))
                        .foregroundColor(value.isEmpty ? .secondary : .primary)
                    
                    Spacer()
                    
                    Image(systemName: "chevron.down")
                        .font(.system(size: 12, weight: .medium))
                        .foregroundColor(.secondary)
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
    }
}

struct ResultCard: View {
    let result: CalculationResult
    
    var body: some View {
        VStack(spacing: 20) {
            // Header
            VStack(spacing: 8) {
                Text("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞")
                    .font(.headline)
                    .fontWeight(.bold)
                
                Text("–í–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }
            
            // Main Result
            VStack(spacing: 16) {
                ZStack {
                    Circle()
                        .stroke(Color.gray.opacity(0.3), lineWidth: 8)
                        .frame(width: 120, height: 120)
                    
                    Circle()
                        .trim(from: 0, to: CGFloat(result.percentage) / 100)
                        .stroke(
                            LinearGradient(
                                colors: [.mint, .green],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            ),
                            style: StrokeStyle(lineWidth: 8, lineCap: .round)
                        )
                        .frame(width: 120, height: 120)
                        .rotationEffect(.degrees(-90))
                    
                    VStack {
                        Text("\(result.percentage)%")
                            .font(.title)
                            .fontWeight(.bold)
                            .foregroundColor(.mint)
                        
                        Text(result.level)
                            .font(.caption)
                            .fontWeight(.medium)
                            .foregroundColor(.secondary)
                    }
                }
                
                Text(result.recommendation)
                    .font(.system(size: 14))
                    .foregroundColor(.primary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
            }
            
            // Details
            VStack(spacing: 12) {
                DetailResultRow(title: "–ë–∞–ª–ª –ï–ù–¢", value: "\(result.entScore)")
                DetailResultRow(title: "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", value: String(format: "%.1f", result.certScore))
                DetailResultRow(title: "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", value: result.university)
                if !result.specialty.isEmpty {
                    DetailResultRow(title: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", value: result.specialty)
                }
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(16)
        .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)
    }
}

struct DetailResultRow: View {
    let title: String
    let value: String
    
    var body: some View {
        HStack {
            Text(title)
                .font(.system(size: 14, weight: .medium))
                .foregroundColor(.secondary)
            
            Spacer()
            
            Text(value)
                .font(.system(size: 14, weight: .semibold))
                .foregroundColor(.primary)
        }
        .padding(.vertical, 4)
    }
}

struct TipItem: View {
    let text: String
    
    var body: some View {
        HStack(alignment: .top, spacing: 8) {
            Circle()
                .fill(Color.mint)
                .frame(width: 6, height: 6)
                .padding(.top, 6)
            
            Text(text)
                .font(.system(size: 14))
                .foregroundColor(.primary)
            
            Spacer()
        }
    }
}

struct HelpView: View {
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Image(systemName: "questionmark.circle.fill")
                    .font(.system(size: 60))
                    .foregroundColor(.teal)
                
                Text("–ü–æ–º–æ—â—å")
                    .font(.title)
                    .fontWeight(.bold)
                
                Text("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                
                Spacer()
            }
            .padding()
            .navigationTitle("–ü–æ–º–æ—â—å")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–ó–∞–∫—Ä—ã—Ç—å") { dismiss() }
                }
            }
        }
    }
}

struct CalculatorView: View {
    @Environment(\.dismiss) private var dismiss
    @State private var entScore: String = ""
    @State private var certificateScore: String = ""
    @State private var selectedUniversity = ""
    @State private var selectedSpecialty = ""
    @State private var calculateResult: CalculationResult?
    @State private var showUniversityPicker = false
    @State private var showSpecialtyPicker = false
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ University.swift
    var universities: [String] {
        return University.getCalculatorUniversityNames()
    }
    
    var specialties: [String] {
        return University.getAllSpecialtyNames()
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    // Header
                    VStack(spacing: 16) {
                        Image(systemName: "function")
                            .font(.system(size: 60))
                            .foregroundColor(.mint)
                        
                        VStack(spacing: 8) {
                            Text("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —à–∞–Ω—Å–æ–≤")
                                .font(.title)
                                .fontWeight(.bold)
                            
                            Text("–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
                                .font(.body)
                                .foregroundColor(.secondary)
                                .multilineTextAlignment(.center)
                        }
                    }
                    .padding(.top, 20)
                    
                    // Input Form
                    VStack(spacing: 20) {
                        // Scores Section
                        VStack(alignment: .leading, spacing: 16) {
                            Text("üìä –í–∞—à–∏ –±–∞–ª–ª—ã")
                                .font(.headline)
                                .fontWeight(.bold)
                            
                            ScoreInputCard(
                                title: "–ë–∞–ª–ª –ï–ù–¢/–ö–¢–ê",
                                placeholder: "125",
                                value: $entScore,
                                maxValue: 140,
                                description: "–ú–∞–∫—Å–∏–º—É–º: 140 –±–∞–ª–ª–æ–≤"
                            )
                            
                            ScoreInputCard(
                                title: "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞",
                                placeholder: "4.5",
                                value: $certificateScore,
                                maxValue: 5,
                                description: "–ü–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ"
                            )
                        }
                        
                        // University Selection
                        VStack(alignment: .leading, spacing: 16) {
                            Text("üéì –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                                .font(.headline)
                                .fontWeight(.bold)
                            
                            VStack(spacing: 12) {
                                SelectionCard(
                                    title: "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
                                    value: selectedUniversity,
                                    placeholder: "–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"
                                ) {
                                    showUniversityPicker = true
                                }
                                
                                SelectionCard(
                                    title: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
                                    value: selectedSpecialty,
                                    placeholder: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
                                ) {
                                    showSpecialtyPicker = true
                                }
                            }
                        }
                        
                        // Calculate Button
                        Button(action: calculateChances) {
                            HStack(spacing: 12) {
                                Image(systemName: "chart.line.uptrend.xyaxis")
                                    .font(.system(size: 16, weight: .semibold))
                                
                                Text("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∞–Ω—Å—ã")
                                    .font(.system(size: 18, weight: .semibold))
                            }
                            .frame(maxWidth: .infinity)
                            .frame(height: 56)
                            .background(
                                LinearGradient(
                                    colors: canCalculate ? [Color.mint, Color.mint.opacity(0.8)] : [Color.gray.opacity(0.6)],
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                            )
                            .foregroundColor(.white)
                            .cornerRadius(16)
                            .shadow(
                                color: canCalculate ? Color.mint.opacity(0.3) : Color.clear,
                                radius: 8, x: 0, y: 4
                            )
                        }
                        .disabled(!canCalculate)
                    }
                    
                    // Results
                    if let result = calculateResult {
                        ResultCard(result: result)
                            .transition(.move(edge: .bottom).combined(with: .opacity))
                    }
                    
                    // Tips Section
                    VStack(alignment: .leading, spacing: 12) {
                        Text("üí° –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —à–∞–Ω—Å—ã")
                            .font(.headline)
                            .fontWeight(.bold)
                        
                        VStack(spacing: 8) {
                            TipItem(text: "–ü–æ–¥–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤")
                            TipItem(text: "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
                            TipItem(text: "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—å–≥–æ—Ç")
                            TipItem(text: "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–¥–∞—á–µ –ï–ù–¢")
                        }
                    }
                    .padding()
                    .background(Color.mint.opacity(0.1))
                    .cornerRadius(12)
                }
                .padding()
            }
            .navigationTitle("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–ó–∞–∫—Ä—ã—Ç—å") { dismiss() }
                }
            }
            // Picker –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
            .sheet(isPresented: $showUniversityPicker) {
                UniversityPickerView(
                    universities: universities,
                    selectedUniversity: $selectedUniversity
                )
            }
            // Picker –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
            .sheet(isPresented: $showSpecialtyPicker) {
                SpecialtyPickerView(
                    specialties: specialties,
                    selectedSpecialty: $selectedSpecialty
                )
            }
        }
    }
    
    private var canCalculate: Bool {
        !entScore.isEmpty && !certificateScore.isEmpty && !selectedUniversity.isEmpty
    }
    
    // MARK: - –†–ê–°–ß–ï–¢ –° –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –§–û–†–ú–£–õ–û–ô + –û–¢–õ–ê–î–ö–ê
    
    private func calculateChances() {
        print("üöÄ –ö–Ω–æ–ø–∫–∞ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∞–Ω—Å—ã' –Ω–∞–∂–∞—Ç–∞")
        print("entScore: '\(entScore)', certificateScore: '\(certificateScore)'")
        print("selectedUniversity: '\(selectedUniversity)', selectedSpecialty: '\(selectedSpecialty)'")
        
        guard let entScoreValue = Double(entScore),
              let certScoreValue = Double(certificateScore) else {
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã –≤ —á–∏—Å–ª–∞")
            
            // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            calculateResult = CalculationResult(
                percentage: 75,
                level: "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
                recommendation: "–¢–µ—Å—Ç: –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–ª–ª–æ–≤",
                entScore: 0,
                certScore: 0.0,
                university: selectedUniversity,
                specialty: selectedSpecialty
            )
            return
        }
        
        print("‚úÖ –ë–∞–ª–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: –ï–ù–¢ \(entScoreValue), –ê—Ç—Ç–µ—Å—Ç–∞—Ç \(certScoreValue)")
        calculateAdvancedChances()
    }
    
    private func calculateAdvancedChances() {
        guard let entScoreValue = Double(entScore),
              let certScoreValue = Double(certificateScore) else {
            print("‚ùå –û—à–∏–±–∫–∞ –≤ calculateAdvancedChances")
            return
        }
        
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        
        // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
        let applicantScore = entScoreValue + (certScoreValue * 4)
        print("–û–±—â–∏–π –±–∞–ª–ª: \(applicantScore)")
        
        // 2. –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        print("–ò—â–µ–º: '\(selectedSpecialty)' –≤ '\(selectedUniversity)'")
        
        let specialtyInfo = University.getSpecialty(
            university: selectedUniversity,
            specialty: selectedSpecialty
        )
        
        if let info = specialtyInfo {
            print("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞!")
            print("–ù–∞–∑–≤–∞–Ω–∏–µ: \(info.name)")
            print("–ú–∏–Ω. –±–∞–ª–ª –Ω–∞ –≥—Ä–∞–Ω—Ç: \(info.minGrantScore)")
            print("–ú–∏–Ω. –±–∞–ª–ª –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ: \(info.minPaidScore)")
            
            // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ –≥—Ä–∞–Ω—Ç –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –§–û–†–ú–£–õ–û–ô
            let grantChance = calculateGrantChance(
                applicantScore: applicantScore,
                minGrantScore: Double(info.minGrantScore)
            )
            
            // 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –§–û–†–ú–£–õ–û–ô
            let paidChance = calculatePaidChance(
                applicantScore: applicantScore,
                minPaidScore: Double(info.minPaidScore)
            )
            
            // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            let (percentage, level, recommendation) = determineAdvancedChances(
                grantChance: grantChance,
                paidChance: paidChance,
                specialtyInfo: info
            )
            
            print("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(percentage)% - \(level)")
            
            calculateResult = CalculationResult(
                percentage: percentage,
                level: level,
                recommendation: recommendation,
                entScore: Int(entScoreValue),
                certScore: certScoreValue,
                university: selectedUniversity,
                specialty: selectedSpecialty
            )
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            
        } else {
            print("‚ùå –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ù–ï –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback")
            calculateFallbackChances()
        }
    }
    
    // MARK: - –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–û–†–ú–£–õ–´ –î–õ–Ø –ì–†–ê–ù–¢–ê
    
    private func calculateGrantChance(applicantScore: Double, minGrantScore: Double) -> Int {
        let difference = applicantScore - minGrantScore
        print("–†–∞–∑–Ω–æ—Å—Ç—å –¥–ª—è –≥—Ä–∞–Ω—Ç–∞: \(difference)")
        
        let percentage: Double
        
        if difference >= 20 {
            percentage = 95.0
        } else if difference >= 0 {
            // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É 35% –∏ 95%
            percentage = 35.0 + (difference / 20.0) * 60.0
        } else if difference >= -10 {
            // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            percentage = 35.0 * exp(difference / 10.0)
        } else {
            percentage = 1.0
        }
        
        let result = max(1, min(99, Int(percentage.rounded())))
        print("–®–∞–Ω—Å –Ω–∞ –≥—Ä–∞–Ω—Ç: \(result)%")
        return result
    }
    
    private func calculatePaidChance(applicantScore: Double, minPaidScore: Double) -> Int {
        let difference = applicantScore - minPaidScore
        print("–†–∞–∑–Ω–æ—Å—Ç—å –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ: \(difference)")
        
        let percentage: Double
        
        if difference >= 15 {
            percentage = 97.0
        } else if difference >= 0 {
            // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É 60% –∏ 97%
            percentage = 60.0 + (difference / 15.0) * 37.0
        } else if difference >= -8 {
            // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ (–±–æ–ª–µ–µ –º—è–≥–∫–æ–µ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ)
            percentage = 60.0 * exp(difference / 8.0)
        } else {
            percentage = 5.0
        }
        
        let result = max(5, min(99, Int(percentage.rounded())))
        print("–®–∞–Ω—Å –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ: \(result)%")
        return result
    }
    
    private func determineAdvancedChances(grantChance: Int, paidChance: Int, specialtyInfo: SpecialtyInfo) -> (Int, String, String) {
        print("–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –≥—Ä–∞–Ω—Ç \(grantChance)%, –ø–ª–∞—Ç–Ω–æ–µ \(paidChance)%")
        
        let percentage: Int
        let level: String
        let recommendation: String
        
        if grantChance >= 70 {
            percentage = grantChance
            level = "–í—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –≥—Ä–∞–Ω—Ç"
            recommendation = "üéâ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –£ –≤–∞—Å \(grantChance)% —à–∞–Ω—Å–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω—Ç –Ω–∞ \"\(specialtyInfo.name)\". –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –Ω–∞ –≥—Ä–∞–Ω—Ç: \(specialtyInfo.minGrantScore)."
            
        } else if grantChance >= 40 {
            percentage = grantChance
            level = "–°—Ä–µ–¥–Ω–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –≥—Ä–∞–Ω—Ç"
            recommendation = "üìä –°—Ä–µ–¥–Ω–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –≥—Ä–∞–Ω—Ç (\(grantChance)%). –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: \(specialtyInfo.minGrantScore). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (\(paidChance)% —à–∞–Ω—Å–æ–≤, –º–∏–Ω. –±–∞–ª–ª: \(specialtyInfo.minPaidScore))."
            
        } else if paidChance >= 60 {
            percentage = paidChance
            level = "–•–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ"
            recommendation = "üí∞ –®–∞–Ω—Å—ã –Ω–∞ –≥—Ä–∞–Ω—Ç –Ω–∏–∑–∫–∏–µ (\(grantChance)%), –Ω–æ –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (\(paidChance)%). –ú–∏–Ω. –±–∞–ª–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ: \(specialtyInfo.minPaidScore)."
            
        } else if paidChance >= 30 {
            percentage = paidChance
            level = "–°—Ä–µ–¥–Ω–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ"
            recommendation = "ü§î –°—Ä–µ–¥–Ω–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (\(paidChance)%). –ì—Ä–∞–Ω—Ç: \(grantChance)%. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω–µ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
            
        } else {
            percentage = max(grantChance, paidChance)
            level = "–ù–∏–∑–∫–∏–µ —à–∞–Ω—Å—ã"
            recommendation = "üìö –ù–∏–∑–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –ì—Ä–∞–Ω—Ç: \(grantChance)%, –ø–ª–∞—Ç–Ω–æ–µ: \(paidChance)%. –ú–∏–Ω. –±–∞–ª–ª –¥–ª—è –≥—Ä–∞–Ω—Ç–∞: \(specialtyInfo.minGrantScore), –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ: \(specialtyInfo.minPaidScore). –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É."
        }
        
        return (percentage, level, recommendation)
    }
    
    // MARK: - –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –Ω–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    private func calculateFallbackChances() {
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ª–æ–≥–∏–∫—É")
        
        guard let entScoreValue = Double(entScore),
              let certScoreValue = Double(certificateScore) else {
            print("‚ùå –û—à–∏–±–∫–∞ –≤ fallback")
            return
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
        let baseScore = calculateBaseScore(ent: entScoreValue, certificate: certScoreValue)
        let universityMultiplier = getUniversityMultiplier(university: selectedUniversity)
        let specialtyMultiplier = getSpecialtyMultiplier(specialty: selectedSpecialty)
        let finalScore = baseScore * universityMultiplier * specialtyMultiplier
        
        print("Fallback —Ä–∞—Å—á–µ—Ç: base=\(baseScore), uni=\(universityMultiplier), spec=\(specialtyMultiplier), final=\(finalScore)")
        
        let (percentage, level, recommendation) = determineChances(score: finalScore,
                                                                 university: selectedUniversity,
                                                                 specialty: selectedSpecialty)
        
        calculateResult = CalculationResult(
            percentage: percentage,
            level: level,
            recommendation: recommendation,
            entScore: Int(entScoreValue),
            certScore: certScoreValue,
            university: selectedUniversity,
            specialty: selectedSpecialty
        )
        
        print("‚úÖ Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(percentage)% - \(level)")
    }
    
    // MARK: - –°—Ç–∞—Ä—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞)
    
    private func calculateBaseScore(ent: Double, certificate: Double) -> Double {
        let entWeight = 0.7
        let certificateWeight = 0.3
        let normalizedENT = (ent / 140.0) * 100.0
        let normalizedCertificate = (certificate / 5.0) * 100.0
        return normalizedENT * entWeight + normalizedCertificate * certificateWeight
    }

    private func getUniversityMultiplier(university: String) -> Double {
        let universityDifficulty: [String: Double] = [
            "–ù–£": 0.6, "–ö–ò–ú–≠–ü": 0.65, "–ö–∞–∑–ù–£": 0.7, "–ö–∞–∑–ù–ú–£": 0.7, "–ö–ë–¢–£": 0.75,
            "–ú–£–ò–¢": 0.78, "–ö–∞–∑–ù–¢–£": 0.8, "–ö–∞–∑–ì–Æ–£": 0.8, "–ö–∞–∑–ù–ü–£": 0.85
        ]
        return universityDifficulty[university] ?? 0.8
    }

    private func getSpecialtyMultiplier(specialty: String) -> Double {
        let specialtyDifficulty: [String: Double] = [
            "–ú–µ–¥–∏—Ü–∏–Ω–∞": 0.5, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã": 0.6, "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": 0.65,
            "–≠–∫–æ–Ω–æ–º–∏–∫–∞": 0.7, "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è": 0.75, "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": 0.8,
            "–ò–Ω–∂–µ–Ω–µ—Ä–∏—è": 0.85, "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞": 0.9
        ]
        return specialtyDifficulty[specialty] ?? 0.8
    }

    private func determineChances(score: Double, university: String, specialty: String) -> (Int, String, String) {
        let percentage: Int
        let level: String
        let recommendation: String
        
        switch score {
        case 85...:
            percentage = 94
            level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã"
            recommendation = "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –í—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç–µ."
        case 75..<85:
            percentage = 82
            level = "–í—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã"
            recommendation = "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –£ –≤–∞—Å –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ \(university)."
        case 65..<75:
            percentage = 67
            level = "–•–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã"
            recommendation = "–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ 2-3 —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞."
        case 50..<65:
            percentage = 50
            level = "–°—Ä–µ–¥–Ω–∏–µ —à–∞–Ω—Å—ã"
            recommendation = "–°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
        case 35..<50:
            percentage = 30
            level = "–ù–∏–∑–∫–∏–µ —à–∞–Ω—Å—ã"
            recommendation = "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ–Ω–µ–µ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã."
        default:
            percentage = 12
            level = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —à–∞–Ω—Å—ã"
            recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Å–¥–∞—á—É –ï–ù–¢."
        }
        
        return (percentage, level, recommendation)
    }
}

#Preview {
    HomeView()
}


