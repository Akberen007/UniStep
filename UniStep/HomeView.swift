//
//  HomeView.swift
//  UniStep
//
//  Created by Akberen on 28.04.2025.
//

import SwiftUI

struct HomeView: View {
    @State private var navigateToDemo = false
    @State private var showContent = false
    @State private var showApplicationForm = false
    @State private var showStatusCheck = false
    @State private var animateCards = false

    var body: some View {
        NavigationStack {
            GeometryReader { geometry in
                ScrollView {
                    VStack(spacing: 0) {
                        // üîπ Header
                        headerSection
                        
                        // üîπ Hero Section
                        heroSection
                        
                        // üîπ Main Actions
                        mainActionsSection
                            .opacity(animateCards ? 1 : 0)
                            .offset(x: animateCards ? 0 : -50)
                            .animation(.spring(response: 0.8, dampingFraction: 0.7).delay(0.2), value: animateCards)
                        
                        // üîπ Features Section
                        featuresSection
                            .opacity(animateCards ? 1 : 0)
                            .offset(x: animateCards ? 0 : 50)
                            .animation(.spring(response: 0.8, dampingFraction: 0.7).delay(0.4), value: animateCards)
                        
                        // üîπ Footer
                        footerSection
                    }
                    .padding(.bottom, max(20, geometry.safeAreaInsets.bottom))
                }
                .scrollIndicators(.hidden)
            }
            .background(
                LinearGradient(
                    colors: [
                        Color.uniBackground,
                        Color.uniBackground.opacity(0.8),
                        Color.white
                    ],
                    startPoint: .top,
                    endPoint: .bottom
                )
                .ignoresSafeArea()
            )
            .onAppear {
                // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                withAnimation(.spring(response: 0.8, dampingFraction: 0.8)) {
                    showContent = true
                }
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                    withAnimation(.spring(response: 0.6, dampingFraction: 0.7)) {
                        animateCards = true
                    }
                }
            }
            .sheet(isPresented: $showApplicationForm) {
                ApplicationFormView()
            }
            .sheet(isPresented: $showStatusCheck) {
                StatusCheckView()
            }
        }
    }
    
    // MARK: - Header Section
    private var headerSection: some View {
        HStack {
            HStack(spacing: 12) {
                ZStack {
                    Circle()
                        .fill(Color.red.opacity(0.1))
                        .frame(width: 50, height: 50)
                    
                    Image("books1")
                        .resizable()
                        .frame(width: 28, height: 32)
                        .foregroundColor(.red)
                }
                
                VStack(alignment: .leading, spacing: 2) {
                    Text("UniStep")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.primary)
                    
                    Text("–ü—Ä–∏–µ–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            
            Spacer()
            
            HStack(spacing: 16) {
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                Button(action: {
                    // TODO: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                }) {
                    ZStack {
                        Circle()
                            .fill(Color.white)
                            .frame(width: 44, height: 44)
                            .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
                        
                        Image(systemName: "bell")
                            .font(.system(size: 18, weight: .medium))
                            .foregroundColor(.primary)
                        
                        // –ö—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞
                        Circle()
                            .fill(Color.red)
                            .frame(width: 10, height: 10)
                            .offset(x: 12, y: -12)
                    }
                }
                
                // –ü—Ä–æ—Ñ–∏–ª—å
                NavigationLink(destination: LoginView()) {
                    Circle()
                        .fill(Color.white)
                        .frame(width: 44, height: 44)
                        .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
                        .overlay(
                            Image(systemName: "person.fill")
                                .font(.system(size: 18, weight: .medium))
                                .foregroundColor(.red)
                        )
                }
            }
        }
        .padding(.horizontal, 20)
        .padding(.top, 20)
        .opacity(showContent ? 1 : 0)
        .offset(y: showContent ? 0 : -30)
        .animation(.spring(response: 0.8, dampingFraction: 0.8), value: showContent)
    }
    
    // MARK: - Hero Section
    private var heroSection: some View {
        VStack(spacing: 16) {
            // –£–ª—É—á—à–µ–Ω–Ω—ã–π SlideView —Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            SlideView()
                .frame(height: 200)
                .clipShape(RoundedRectangle(cornerRadius: 16)) // –£–º–µ–Ω—å—à–∏–ª —Å 20 –¥–æ 16
                .shadow(color: .black.opacity(0.1), radius: 12, x: 0, y: 6)
                .opacity(showContent ? 1 : 0)
                .scaleEffect(showContent ? 1 : 0.9)
                .animation(.spring(response: 0.8, dampingFraction: 0.8).delay(0.1), value: showContent)
                .padding(.horizontal, 20)
        }
        .padding(.vertical, 16)
    }
    
    // MARK: - Main Actions Section
    private var mainActionsSection: some View {
        VStack(spacing: 20) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            HStack {
                Text("–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
                    .font(.system(size: 22, weight: .bold, design: .rounded))
                    .foregroundColor(.primary)
                Spacer()
            }
            .padding(.horizontal, 20)
            
            VStack(spacing: 16) {
                // –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É - –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                PrimaryActionCard(
                    icon: "doc.fill",
                    title: "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                    subtitle: "–ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                    gradient: LinearGradient(
                        colors: [Color.red, Color.red.opacity(0.8)],
                        startPoint: .leading,
                        endPoint: .trailing
                    ),
                    action: {
                        showApplicationForm = true
                    }
                )
                
                // –í—Ç–æ—Ä–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                HStack(spacing: 12) {
                    MediumActionCard(
                        icon: "magnifyingglass.circle.fill",
                        title: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        subtitle: "–ü–æ –Ω–æ–º–µ—Ä—É",
                        gradient: LinearGradient(
                            colors: [Color.blue, Color.blue.opacity(0.7)],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        ),
                        action: {
                            showStatusCheck = true
                        }
                    )
                    .frame(height: 100) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                    
                    MediumActionCard(
                        icon: "building.2.circle.fill",
                        title: "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã",
                        subtitle: "–í—ã–±—Ä–∞—Ç—å –≤—É–∑",
                        gradient: LinearGradient(
                            colors: [Color.purple, Color.purple.opacity(0.7)],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        ),
                        action: {
                            // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
                        }
                    )
                    .frame(height: 100) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                HStack(spacing: 8) {
                    CompactActionButton(
                        icon: "doc.text.fill",
                        title: "–î–æ–∫—É–º–µ–Ω—Ç—ã",
                        color: .orange,
                        action: {
                            // TODO: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        }
                    )
                    
                    CompactActionButton(
                        icon: "calendar.badge.clock",
                        title: "–°—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏",
                        color: .indigo,
                        action: {
                            // TODO: –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ä–æ–∫–æ–≤
                        }
                    )
                    
                    CompactActionButton(
                        icon: "calculator",
                        title: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                        color: .mint,
                        action: {
                            // TODO: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª–ª–æ–≤
                        }
                    )
                    
                    CompactActionButton(
                        icon: "questionmark.circle",
                        title: "–ü–æ–º–æ—â—å",
                        color: .teal,
                        action: {
                            // TODO: FAQ
                        }
                    )
                }
                .padding(.horizontal, 20)
            }
            .padding(.horizontal, 20)
        }
        .padding(.vertical, 20)
    }
    
    // MARK: - Features Section
    private var featuresSection: some View {
        VStack(spacing: 24) {
            HStack {
                Text("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ UniStep")
                    .font(.system(size: 20, weight: .semibold))
                    .foregroundColor(.primary)
                Spacer()
            }
            .padding(.horizontal, 20)
            
            VStack(spacing: 16) {
                ModernFeatureItem(
                    icon: "bolt.fill",
                    text: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫",
                    description: "–ü–æ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                    color: .orange
                )
                
                ModernFeatureItem(
                    icon: "doc.fill",
                    text: "–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    description: "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –æ–±–ª–∞–∫–µ",
                    color: .blue
                )
                
                ModernFeatureItem(
                    icon: "chart.bar.fill",
                    text: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    description: "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ",
                    color: .green
                )
            }
            .padding(.horizontal, 20)
        }
        .padding(.vertical, 28)
        .background(
            RoundedRectangle(cornerRadius: 16) // –ò–∑–º–µ–Ω–∏–ª —Å 24 –Ω–∞ 16
                .fill(Color.gray.opacity(0.05))
        )
        .padding(.horizontal, 20)
    }
    
    // MARK: - Footer Section
    private var footerSection: some View {
        VStack(spacing: 20) {
            Rectangle()
                .fill(Color.gray.opacity(0.2))
                .frame(height: 1)
                .padding(.horizontal, 40)
            
            VStack(spacing: 16) {
                Text("UniStep ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏—ë–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                
                HStack(spacing: 24) {
                    Button("–ü–æ–¥–¥–µ—Ä–∂–∫–∞") {
                        // TODO: –ü–æ–¥–¥–µ—Ä–∂–∫–∞
                    }
                    .font(.system(size: 15, weight: .medium))
                    .foregroundColor(.red)
                    
                    Button("–û –ø—Ä–æ–µ–∫—Ç–µ") {
                        // TODO: –û –ø—Ä–æ–µ–∫—Ç–µ
                    }
                    .font(.system(size: 15, weight: .medium))
                    .foregroundColor(.red)
                    
                    Button("–ö–æ–Ω—Ç–∞–∫—Ç—ã") {
                        // TODO: –ö–æ–Ω—Ç–∞–∫—Ç—ã
                    }
                    .font(.system(size: 15, weight: .medium))
                    .foregroundColor(.red)
                }
            }
            .padding(.horizontal, 20)
        }
        .padding(.vertical, 32)
    }
}

// MARK: - Primary Action Card
struct PrimaryActionCard: View {
    let icon: String
    let title: String
    let subtitle: String
    let gradient: LinearGradient
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: 18) {
                ZStack {
                    Circle()
                        .fill(Color.white.opacity(0.25))
                        .frame(width: 58, height: 58)
                    
                    Image(systemName: icon)
                        .font(.system(size: 26, weight: .semibold))
                        .foregroundColor(.white)
                }
                
                VStack(alignment: .leading, spacing: 6) {
                    Text(title)
                        .font(.system(size: 19, weight: .bold))
                        .foregroundColor(.white)
                    
                    Text(subtitle)
                        .font(.system(size: 15))
                        .foregroundColor(.white.opacity(0.9))
                }
                
                Spacer()
                
                Image(systemName: "arrow.right")
                    .font(.system(size: 18, weight: .bold))
                    .foregroundColor(.white)
            }
            .padding(.horizontal, 24)
            .padding(.vertical, 22)
            .background(gradient)
            .cornerRadius(16) // –£–º–µ–Ω—å—à–∏–ª —Å 22 –¥–æ 16
            .shadow(color: .red.opacity(0.4), radius: 16, x: 0, y: 8)
        }
        .buttonStyle(BounceButtonStyle())
    }
}

// MARK: - Medium Action Card (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
struct MediumActionCard: View {
    let icon: String
    let title: String
    let subtitle: String
    let gradient: LinearGradient
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 12) {
                ZStack {
                    Circle()
                        .fill(Color.white.opacity(0.25))
                        .frame(width: 44, height: 44)
                    
                    Image(systemName: icon)
                        .font(.system(size: 20, weight: .semibold))
                        .foregroundColor(.white)
                }
                
                VStack(spacing: 4) {
                    Text(title)
                        .font(.system(size: 15, weight: .bold))
                        .foregroundColor(.white)
                        .multilineTextAlignment(.center)
                        .lineLimit(1)
                    
                    Text(subtitle)
                        .font(.system(size: 12))
                        .foregroundColor(.white.opacity(0.85))
                        .multilineTextAlignment(.center)
                        .lineLimit(1)
                }
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(gradient)
            .cornerRadius(16) // –£–º–µ–Ω—å—à–∏–ª —Å 18 –¥–æ 16 // –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        }
        .buttonStyle(BounceButtonStyle())
    }
}
struct SecondaryActionCard: View {
    let icon: String
    let title: String
    let subtitle: String
    let color: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 16) {
                ZStack {
                    Circle()
                        .fill(color.opacity(0.15))
                        .frame(width: 54, height: 54)
                    
                    Image(systemName: icon)
                        .font(.system(size: 22, weight: .semibold))
                        .foregroundColor(color)
                }
                
                VStack(spacing: 6) {
                    Text(title)
                        .font(.system(size: 15, weight: .bold))
                        .foregroundColor(.primary)
                        .multilineTextAlignment(.center)
                    
                    Text(subtitle)
                        .font(.system(size: 12))
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
            }
            .frame(maxWidth: .infinity)
            .padding(.vertical, 24)
            .background(
                RoundedRectangle(cornerRadius: 16) // –ò–∑–º–µ–Ω–∏–ª —Å 18 –Ω–∞ 16
                    .fill(Color.white)
                    .shadow(color: .black.opacity(0.08), radius: 12, x: 0, y: 6)
            )
        }
        .buttonStyle(ScaleButtonStyle())
    }
}

// MARK: - Compact Action Button (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
struct CompactActionButton: View {
    let icon: String
    let title: String
    let color: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 6) {
                ZStack {
                    Circle()
                        .fill(color.opacity(0.15))
                        .frame(width: 32, height: 32)
                    
                    Image(systemName: icon)
                        .font(.system(size: 14, weight: .semibold))
                        .foregroundColor(color)
                }
                
                Text(title)
                    .font(.system(size: 10, weight: .medium))
                    .foregroundColor(.primary)
                    .multilineTextAlignment(.center)
                    .lineLimit(2)
                    .minimumScaleFactor(0.8)
            }
            .frame(maxWidth: .infinity)
            .frame(height: 70)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color.white)
                    .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
            )
        }
        .buttonStyle(ScaleButtonStyle())
    }
}

// MARK: - Modern Feature Item
struct ModernFeatureItem: View {
    let icon: String
    let text: String
    let description: String
    let color: Color
    
    var body: some View {
        HStack(spacing: 18) {
            ZStack {
                RoundedRectangle(cornerRadius: 14)
                    .fill(color.opacity(0.12))
                    .frame(width: 48, height: 48)
                
                Image(systemName: icon)
                    .font(.system(size: 20, weight: .semibold))
                    .foregroundColor(color)
            }
            
            VStack(alignment: .leading, spacing: 4) {
                Text(text)
                    .font(.system(size: 17, weight: .semibold))
                    .foregroundColor(.primary)
                
                Text(description)
                    .font(.system(size: 14))
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            Image(systemName: "checkmark.circle.fill")
                .font(.system(size: 18))
                .foregroundColor(.green)
        }
        .padding(.horizontal, 20)
        .padding(.vertical, 16)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: .black.opacity(0.04), radius: 8, x: 0, y: 4)
        )
    }
}

// MARK: - Bounce Button Style (–±–æ–ª–µ–µ –∂–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
struct BounceButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .scaleEffect(configuration.isPressed ? 0.92 : 1.0)
            .brightness(configuration.isPressed ? -0.1 : 0)
            .animation(.spring(response: 0.3, dampingFraction: 0.6), value: configuration.isPressed)
    }
}

// MARK: - Scale Button Style
struct ScaleButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .scaleEffect(configuration.isPressed ? 0.96 : 1.0)
            .animation(.easeInOut(duration: 0.12), value: configuration.isPressed)
    }
}

// MARK: - Status Check View
struct StatusCheckView: View {
    @Environment(\.dismiss) private var dismiss
    @State private var searchText = ""
    @State private var selectedOption = 0
    
    var body: some View {
        NavigationView {
            VStack(spacing: 32) {
                VStack(spacing: 20) {
                    ZStack {
                        Circle()
                            .fill(Color.blue.opacity(0.12))
                            .frame(width: 90, height: 90)
                        
                        Image(systemName: "magnifyingglass.circle.fill")
                            .font(.system(size: 44))
                            .foregroundColor(.blue)
                    }
                    
                    VStack(spacing: 8) {
                        Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                    }
                }
                
                VStack(spacing: 24) {
                    Picker("–¢–∏–ø –ø–æ–∏—Å–∫–∞", selection: $selectedOption) {
                        Text("–ü–æ –∫–æ–¥—É –∑–∞—è–≤–∫–∏").tag(0)
                        Text("–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞").tag(1)
                    }
                    .pickerStyle(SegmentedPickerStyle())
                    .padding(.horizontal)
                    
                    CustomTextField(
                        title: selectedOption == 0 ? "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AB2024-1234)" : "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                        text: $searchText,
                        systemImage: selectedOption == 0 ? "number.circle" : "phone.circle"
                    )
                }
                
                Button(action: {
                    // TODO: –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏
                    dismiss()
                }) {
                    HStack(spacing: 12) {
                        Text("–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É")
                            .fontWeight(.semibold)
                        
                        Image(systemName: "arrow.right")
                            .font(.system(size: 15, weight: .semibold))
                    }
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 16)
                    .background(
                        RoundedRectangle(cornerRadius: 14)
                            .fill(searchText.isEmpty ? Color.gray.opacity(0.6) : Color.blue)
                    )
                    .foregroundColor(.white)
                }
                .disabled(searchText.isEmpty)
                .padding(.horizontal)
                
                Spacer()
            }
            .padding()
            .navigationTitle("–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–ó–∞–∫—Ä—ã—Ç—å") {
                        dismiss()
                    }
                }
            }
        }
    }
}

#Preview{
    HomeView()
}
